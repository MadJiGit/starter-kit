security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppAuthenticator
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: /user
                username_parameter: _email
                password_parameter: _password
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: false
            entry_point: form_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_EDITOR: [ ROLE_USER ]
        ROLE_ADMIN: [ ROLE_EDITOR, ROLE_USER ]
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_EDITOR, ROLE_USER ]

    access_control:
        - { path: ^/(en|bg)/js/js_translations.js, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/login, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/forgotten_pass, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/new_password, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/confirm_new_password, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/register/new, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/register/confirm, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/register/resend_confirmation, roles: PUBLIC_ACCESS }
        - { path: ^/(en|bg)/error, roles: PUBLIC_ACCESS }

        - { path: ^/(en|bg)/admin, roles: [ROLE_ADMIN, ROLE_SUPER_ADMIN] }
        - { path: ^/(en|bg)/home, roles: ROLE_USER }
        - { path: ^/(en|bg)/report, roles: ROLE_USER }
        - { path: ^/(en|bg)/profile, roles: IS_AUTHENTICATED_FULLY }

        - { path: ^/, roles: ROLE_USER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
